{"version":3,"sources":["Todo/Todo.js","TodoListView/TodoListView.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","style","display","justifyContent","width","fontWeight","todo","title","description","onClick","id","axios","delete","then","res","console","log","color","TodoListView","todoList","map","App","useState","setTodoList","setTitle","desc","setDesc","useEffect","get","data","className","onChange","event","target","value","placeholder","payload","post","URLSearchParams","header","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGe,SAASA,EAAKC,GAKzB,OACI,qBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,SACI,qBAAKF,MAAO,CAAEG,MAAO,SAArB,SACI,8BAAG,uBAAMH,MAAO,CAAEI,WAAY,QAA3B,UAAsCL,EAAMM,KAAKC,MAAjD,OAAH,IAAoEP,EAAMM,KAAKE,YAA/E,IAA4F,wBAAQC,QAAS,kBAP9FC,EAOsHV,EAAMM,KAAKI,QANxJC,IAAMC,OAAO,kCAAoCF,GAC5CG,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAFP,IAACJ,GAOsIT,MAAO,CAAEgB,MAAO,OAAzE,2BCP7F,SAASC,EAAalB,GACjC,OACI,8BACI,6BACKA,EAAMmB,SAASC,KAAI,SAAAd,GAAI,OAAI,cAACP,EAAD,CAAMO,KAAMA,WC6BzCe,MAhCf,WAAgB,IAAD,EACmBC,mBAAS,CAAC,KAD7B,mBACNH,EADM,KACII,EADJ,OAEaD,mBAAS,IAFtB,mBAENf,EAFM,KAECiB,EAFD,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,KAsBb,OAjBAC,qBAAU,WACRhB,IAAMiB,IAAI,kCACPf,MAAK,SAAAC,GACJS,EAAYT,EAAIe,YAepB,sBAAKC,UAAU,MAAf,UACE,2CACA,cAACZ,EAAD,CAAcC,SAAUA,IACxB,yCACA,uBAAOY,SAAU,SAAAC,GAAK,OAAIR,EAASQ,EAAMC,OAAOC,QAAQC,YAAY,UAJtE,IAIiF,uBAAOJ,SAAU,SAAAC,GAAK,OAAIN,EAAQM,EAAMC,OAAOC,QAAQC,YAAY,gBAAgB,wBAAQ1B,QAfvJ,WACrB,IAAM2B,EAAU,CAAE,MAAS7B,EAAO,YAAekB,GACjDd,IAAM0B,KAAK,kCAAmC,IAAIC,gBAAgBF,GAAS,CACvEG,OAAO,CACH,eAAgB,uCAGrB1B,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAQyI,qBCpBzJ0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55abb251.chunk.js","sourcesContent":["import axios from 'axios'\nimport React from 'react'\n\nexport default function Todo(props) {\n    const deleteTodoHandler = (id) => {\n        axios.delete(\"http://localhost:8001/api/todo/\" + id)\n            .then(res => console.log(res))\n    }\n    return (\n        <div style={{ display: \"flex\", justifyContent: 'center' }}>\n            <div style={{ width: \"500px\" }}>\n                <p><span style={{ fontWeight: 'bold' }}>{props.todo.title}:</span> {props.todo.description} <button onClick={() => deleteTodoHandler(props.todo.id)} style={{ color: 'red' }}>Delete</button></p>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react';\nimport Todo from '../Todo/Todo'\n\n\nexport default function TodoListView(props) {\n    return (\n        <div>\n            <ul>\n                {props.todoList.map(todo => <Todo todo={todo} />)}\n            </ul>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TodoListView from './TodoListView/TodoListView';\nimport axios from 'axios';\n\nfunction App() {\n  const [todoList, setTodoList] = useState([{}])\n  const [title, setTitle] = useState('')\n  const [desc, setDesc] = useState('')\n\n  useEffect(() => {\n    axios.get('http://localhost:8001/api/todo')\n      .then(res => {\n        setTodoList(res.data)\n      })\n  });\n\n  const addTodoHandler = () => {\n    const payload = { 'title': title, 'description': desc }\n    axios.post('http://localhost:8001/api/todo/', new URLSearchParams(payload),{\n        header:{\n            \"Content-type\": \"application/x-www-form-urlencoded\"\n        }\n    })\n      .then(res => console.log(res))\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <TodoListView todoList={todoList} />\n      <p>Add todo</p>\n      <input onChange={event => setTitle(event.target.value)} placeholder='Title' /> <input onChange={event => setDesc(event.target.value)} placeholder='Description' /><button onClick={addTodoHandler}>Add</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}